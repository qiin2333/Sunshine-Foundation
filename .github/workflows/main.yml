name: Build and Release

on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  github_env:
    name: GitHub Env Debug
    runs-on: ubuntu-latest
    steps:
      - name: Dump github context
        run: echo "$GITHUB_CONTEXT"
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

  setup_release:
    name: Setup Release
    outputs:
      publish_release: ${{ steps.setup_release_auto.outputs.publish_release || steps.setup_release_manual.outputs.publish_release }}
      release_body: ${{ steps.setup_release_auto.outputs.release_body || steps.setup_release_manual.outputs.release_body }}
      release_commit: ${{ steps.setup_release_auto.outputs.release_commit || steps.setup_release_manual.outputs.release_commit }}
      release_generate_release_notes: ${{ steps.setup_release_auto.outputs.release_generate_release_notes || steps.setup_release_manual.outputs.release_generate_release_notes }}
      release_tag: ${{ steps.setup_release_auto.outputs.release_tag || steps.setup_release_manual.outputs.release_tag }}
      release_version: ${{ steps.setup_release_auto.outputs.release_version || steps.setup_release_manual.outputs.release_version }}
    permissions:
      contents: write  # read does not work to check squash and merge details
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug GitHub Event
        run: |
          echo "GitHub Event Name: ${{ github.event_name }}"
          echo 'GitHub Event JSON: ${{ toJson(github.event) }}'
          echo "Has commits field: ${{ contains(toJson(github.event), 'commits') }}"

      - name: Setup Release (Auto)
        id: setup_release_auto
        if: github.event_name != 'workflow_dispatch'
        uses: LizardByte/setup-release-action@v2025.426.225
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Release (Manual)
        id: setup_release_manual
        if: github.event_name == 'workflow_dispatch'
        run: |
          # 为手动构建设置默认值
          echo "publish_release=false" >> $GITHUB_OUTPUT
          echo "release_body=Manual build" >> $GITHUB_OUTPUT
          echo "release_commit=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "release_generate_release_notes=false" >> $GITHUB_OUTPUT
          echo "release_tag=manual-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          echo "release_version=manual-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

  build_win:
    name: Windows
    needs: setup_release
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Dependencies Windows
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: true
          install: >-
            wget

      - name: Update Windows dependencies
        env:
          gcc_version: '15.1.0-5'
        shell: msys2 {0}
        run: |
          broken_deps=(
            "mingw-w64-ucrt-x86_64-gcc"
            "mingw-w64-ucrt-x86_64-gcc-libs"
          )

          tarballs=""
          for dep in "${broken_deps[@]}"; do
            tarball="${dep}-${gcc_version}-any.pkg.tar.zst"

            # download and install working version
            wget https://repo.msys2.org/mingw/ucrt64/${tarball}

            tarballs="${tarballs} ${tarball}"
          done

          # install broken dependencies
          if [ -n "$tarballs" ]; then
            pacman -U --noconfirm ${tarballs}
          fi

          # install dependencies
          dependencies=(
            "git"
            "mingw-w64-ucrt-x86_64-cmake"
            "mingw-w64-ucrt-x86_64-ninja"
            "mingw-w64-ucrt-x86_64-cppwinrt"
            "mingw-w64-ucrt-x86_64-curl-winssl"
            "mingw-w64-ucrt-x86_64-graphviz"
            "mingw-w64-ucrt-x86_64-MinHook"
            "mingw-w64-ucrt-x86_64-miniupnpc"
            "mingw-w64-ucrt-x86_64-nlohmann-json"
            "mingw-w64-ucrt-x86_64-nodejs"
            "mingw-w64-ucrt-x86_64-nsis"
            "mingw-w64-ucrt-x86_64-onevpl"
            "mingw-w64-ucrt-x86_64-openssl"
            "mingw-w64-ucrt-x86_64-opus"
            "mingw-w64-ucrt-x86_64-toolchain"
          )

          # Note: mingw-w64-ucrt-x86_64-rust conflicts with fixed gcc-15.1.0-5
          # We install Rust via rustup in a separate step

          pacman -Syu --noconfirm --ignore="$(IFS=,; echo "${broken_deps[*]}")" "${dependencies[@]}"

      - name: Install Rust (for Tauri GUI)
        shell: msys2 {0}
        run: |
          echo "Installing Rust via rustup..."
          
          # Rust installs to Windows user directory
          WINDOWS_USER=$(cmd //c "echo %USERNAME%" | tr -d '\r')
          CARGO_BIN="/c/Users/${WINDOWS_USER}/.cargo/bin"
          export PATH="$CARGO_BIN:$PATH"
          
          # Check if cargo already exists
          if command -v cargo &> /dev/null; then
            echo "Rust already installed: $(cargo --version)"
          else
            # Download and install rustup
            curl --proto '=https' --tlsv1.2 -sSf https://win.rustup.rs/x86_64 -o /tmp/rustup-init.exe
            /tmp/rustup-init.exe -y --default-toolchain stable --profile minimal
            
            # Refresh PATH
            sleep 3
            export PATH="$CARGO_BIN:$PATH"
            
            # Verify installation
            if [ -f "$CARGO_BIN/cargo.exe" ]; then
              echo "Rust installed successfully: $(cargo --version)"
            else
              echo "Warning: Rust installed but cargo not found at $CARGO_BIN"
              exit 1
            fi
          fi

      - name: Verify Build Tools
        shell: msys2 {0}
        run: |
          echo "Verifying build tools are installed..."
          which cmake || (echo "cmake not found" && exit 1)
          which ninja || (echo "ninja not found" && exit 1)
          which gcc || (echo "gcc not found" && exit 1)
          
          # verify Rust is in PATH
          WINDOWS_USER=$(cmd //c "echo %USERNAME%" | tr -d '\r')
          CARGO_BIN="/c/Users/${WINDOWS_USER}/.cargo/bin"
          export PATH="$CARGO_BIN:$PATH"
          
          which cargo || (echo "cargo not found" && exit 1)
          
          echo "All build tools verified successfully"
          echo "  CMake: $(cmake --version | head -1)"
          echo "  Ninja: $(ninja --version)"
          echo "  GCC: $(gcc --version | head -1)"
          echo "  Cargo: $(cargo --version)"

      - name: Build Windows
        shell: msys2 {0}
        env:
          BRANCH: ${{ github.head_ref || github.ref_name }}
          BUILD_VERSION: ${{ needs.setup_release.outputs.release_tag }}.杂鱼
          COMMIT: ${{ needs.setup_release.outputs.release_commit }}
        run: |
          # add Rust to PATH for Tauri GUI build
          WINDOWS_USER=$(cmd //c "echo %USERNAME%" | tr -d '\r')
          CARGO_BIN="/c/Users/${WINDOWS_USER}/.cargo/bin"
          export PATH="$CARGO_BIN:$PATH"
          
          mkdir -p build
          cmake \
            -B build \
            -G Ninja \
            -S . \
            -DBUILD_DOCS=OFF \
            -DSUNSHINE_ASSETS_DIR=assets \
            -DSUNSHINE_PUBLISHER_NAME='${{ github.repository_owner }}' \
            -DSUNSHINE_PUBLISHER_WEBSITE='https://app.lizardbyte.dev' \
            -DSUNSHINE_PUBLISHER_ISSUE_URL='https://app.lizardbyte.dev/support'
          ninja -C build

      - name: Package Windows
        shell: msys2 {0}
        run: |
          mkdir -p artifacts
          cd build

          # package - 生成 NSIS 安装包和 ZIP 便携版
          cpack -G NSIS --verbose
          cpack -G ZIP --verbose

          # move
          mv ./cpack_artifacts/Sunshine.exe ../artifacts/sunshine-windows-installer.exe
          mv ./cpack_artifacts/Sunshine.zip ../artifacts/sunshine-windows-portable.zip

      - name: Generate Checksums
        shell: pwsh
        run: |
          # 生成 SHA256 校验和
          .\scripts\generate-checksums.ps1 -Path .\artifacts -Output "SHA256SUMS.txt"

      - name: Package Windows Debug Info
        working-directory: build
        run: |
          # use .dbg file extension for binaries to avoid confusion with real packages
          Get-ChildItem -File -Recurse | `
            % { Rename-Item -Path $_.PSPath -NewName $_.Name.Replace(".exe",".dbg") }

          # save the binaries with debug info
          7z -r `
            "-xr!CMakeFiles" `
            "-xr!cpack_artifacts" `
            a "../artifacts/sunshine-win32-debuginfo.7z" "*.dbg"

      - name: Rename release assets
        shell: msys2 {0}
        run: |
          # Format tag to vYEAR.DATE where DATE is zero-padded to 4 digits
          TAG="${{ needs.setup_release.outputs.release_tag }}"
          NEWTAG="$TAG"

          if [[ "$TAG" =~ ^v([0-9]{4})\.([0-9]+) ]]; then
            YEAR="${BASH_REMATCH[1]}"
            DATE_PART="${BASH_REMATCH[2]}"
            DATE_PADDED=$(printf "%04d" "$DATE_PART")
            NEWTAG="v${YEAR}.${DATE_PADDED}"
          fi

          # 重命名安装包和便携版
          mv artifacts/sunshine-windows-installer.exe "artifacts/Sunshine.${NEWTAG}.WindowsInstaller.exe"
          mv artifacts/sunshine-windows-portable.zip "artifacts/Sunshine.${NEWTAG}.WindowsPortable.zip"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sunshine-windows
          path: |
            artifacts/Sunshine.*.WindowsInstaller.exe
            artifacts/Sunshine.*.WindowsPortable.zip
            artifacts/SHA256SUMS.txt
            artifacts/checksums.json
          if-no-files-found: error

      - name: Create/Update GitHub Release
        if: needs.setup_release.outputs.publish_release == 'true'
        uses: LizardByte/create-release-action@v2025.426.1549
        with:
          allowUpdates: true
          body: ${{ needs.setup_release.outputs.release_body }}
          generateReleaseNotes: ${{ needs.setup_release.outputs.release_generate_release_notes }}
          name: ${{ needs.setup_release.outputs.release_tag }}.杂鱼
          prerelease: true
          tag: ${{ needs.setup_release.outputs.release_tag }}.杂鱼
          token: ${{ secrets.GH_BOT_TOKEN }}
